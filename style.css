*,
::before,
::after {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

body {
  min-height: 100vh;
  font-family: lato, Helvetica, sans-serif;
  background: linear-gradient(to right, #d17608, #ec3503);
  padding: clamp(20px, 5vw, 50px) 20px 10px;
}

h1, 
.score,
.advice {
  text-align: center;
  color: #f1f1f1;
}

h1 {
  font-family: Raleway;
  font-size: clamp(25px, 7vw, 70px);/*clamp permet de rendre responsive la font size en déclarant sa taille mini, préférée et max. la taille préférée est égale 10% de sa taille max */
  font-weight: 300;
}
h1 span {
  font-weight: 800;
}
.advice {
  font-size: clamp(16px, 2.5vw, 25px);
  margin-top: 10px;
}
.score {
  font-size: clamp(16px, 2.5vw, 20px);
  margin-top: 15px;
}

.grid {
  display: grid;
  grid-template-columns: repeat(4, 1fr);/*On dit que le template de la grille représentera 4 fraction unit, et s'il y a des éléments en plus, ils iront se mettre à la ligne.*/
  max-width: 800px;
  gap: 10px;
  margin: 30px auto 0;/*Centre la grille*/
}
.card {
  aspect-ratio: 1/1;/*Permet d'avoir des carrés pour chaque colonne, finalement ça va adapter la height à la width (qui dans notre cas est de 1fr)*/
  perspective: 1000px;/*Ajoute une pespective entre l'écran et l'utilisateur en déterminant la force de l'effet (de base à 800). Sans cette propriété la carte se retournerai de manière linéaire / plate, sans profondeur.*/
  cursor: pointer;
  user-select: none;/*Permet d'éviter de sélectionner une image*/
  transition: transform 0.2s ease-out;/*Ajoute un effet de ease out de 0.2s à chaque event (comme le :hover qui suit)*/
}
.card:hover {
  transform: scale(1.02)/*On zoom card de x 1.02 en passant dessus*/
}
.double-face {
  position: relative;/*Vu que ses enfants seront en position : absolute alors on initialise relative pour éviter que les enfants sortent de leur parent*/
  width: 100%;
  height: 100%;
  transform-style: preserve-3d;
  /*Ca permet de préserver l'environnement 3D qu'on a créé dans le parent => cf. perspective : 1000px. Sans ça, le fruit n'apparaîtra pas.*/
  will-change: transform;/*Permet de prévenir le navigateur sur la propension d'un élément à changer. Ca permet d'optimiser mais dans certains cas ça peut être coûteux en calculs.*/
  transition: transform 0.6s;/*Indique le temps que l'élément va mettre pour tourner*/
  box-shadow: 0 5px 5px rgba(0,0,0,0.3);
  pointer-events: none;/* On désactive le pointerevent pour vraiment pouvoir sélectionner uniquement la card en javascript */
}
.face,
.back {
  position: absolute;
  width: 100%;
  height: 100%;
  pointer-events: none;
  border-radius: 5px;
  background: #f1f1f1;
  display: flex;
  justify-content: center;
  align-items: center;
  pointer-events: none;/* On désactive le pointerevent pour vraiment pouvoir sélectionner uniquement la card en javascript */
}
.back {
  backface-visibility: hidden;/*Lorsque back sera retourné alors on n'affichera plus sont contenu. Ca laisse donc la place à face (fruit)*/
  -webkit-backface-visibility: hidden;
}
.face {
  transform: rotateY(180deg);/*rotateY permet de se faire retourner la carte de gauche à droite, rotateX serait de haut en bas.*/
}
.face img,
.back img {
  width: 60%;
}
.active {
  transform: rotateY(180deg);
}